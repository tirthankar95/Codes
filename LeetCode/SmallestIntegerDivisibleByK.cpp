/* Actual Solution

class Solution {
public:
    int smallestRepunitDivByK(int k) {
        if(!(k%10==1 || k%10==3 || k%10==7 || k%10==9))return -1;
        int len=1; int div=1;
        while(div%k){
            div=(div%k)*10+1;
            len++;
        }
        return len;
    }
};

*/
#include<bits/stdc++.h>
using namespace std;
typedef vector<int> vi;
const int mxSize=2e4+1;
int aArr[mxSize],bArr[mxSize];

class Solution {
public:
    int smallestRepunitDivByK(int k) {
        if(k==1)return 1;
        memset(aArr,0,mxSize*sizeof(int));
        memset(bArr,0,mxSize*sizeof(int));
        int iter=0;
        while(k){
            bArr[iter++]=(k%10);
            k/=10;
        }
        int len=0;
        int tempC=0,temp1,temp;
        bool isZero=false;
        for(int i=0;i<iter;i++)
            if(bArr[i]==0)isZero=true;
        for(int b=0;true;b++){
            if(isZero && b>=mxSize)break;
            if(!isZero && (b>=iter && tempC==0))break;
            temp=tempC;
            for(int i=0;i<len;i++)
                temp+=aArr[i]*bArr[len-i];
            bool found=false;
            for(int i=0;i<=9;i++)
            {
                temp1=(bArr[0]*i+temp);
                if(temp1%10==1){
                    tempC=temp1/10;
                    aArr[len++]=i;
                    found=true;
                    break;
                }
            }//end of inner for-i.
            if(!found)return -1;
        }//end of for-i.
        if(!isZero)return len;
        int mxZero=0,pos,consecZero,lb=0;
        while(lb<mxSize){
            if(aArr[lb]==0){
                consecZero=0;
                while(lb<mxSize && aArr[lb++]==0)consecZero++;
                if(mxZero<consecZero){
                    mxZero=consecZero;
                    pos=lb-1;
                }
            }
            else lb++;
        }//end of while.
        return pos;        
    }
};

int main(){
	Solution obj;
	for(int i=1;i<=100;i++)
		cout<<i<<" "<<obj.smallestRepunitDivByK(i)<<endl;
	return 0;
}
/*
Output
1 1
2 -1
3 3
4 -1
5 -1
6 -1
7 6
8 -1
9 9
10 -1
11 2
12 -1
13 6
14 -1
15 -1
16 -1
17 16
18 -1
19 18
20 -1
21 6
22 -1
23 22
24 -1
25 -1
26 -1
27 27
28 -1
29 28
30 -1
31 15
32 -1
33 6
34 -1
35 -1
36 -1
37 3
38 -1
39 6
40 -1
41 5
42 -1
43 21
44 -1
45 -1
46 -1
47 46
48 -1
49 42
50 -1
51 48
52 -1
53 13
54 -1
55 -1
56 -1
57 18
58 -1
59 58
60 -1
61 60
62 -1
63 18
64 -1
65 -1
66 -1
67 33
68 -1
69 66
70 -1
71 35
72 -1
73 8
74 -1
75 -1
76 -1
77 6
78 -1
79 13
80 -1
81 81
82 -1
83 41
84 -1
85 -1
86 -1
87 84
88 -1
89 44
90 -1
91 6
92 -1
93 15
94 -1
95 -1
96 -1
97 96
98 -1
99 18
100 -1
*/
int main(){
	Solution obj;
	for(int i=1;i<=1000;i++)
	{
		if(i%10==1 || i%10==3 || i%10==7 || i%10==9)
			cout<<i<<" "<<obj.smallestRepunitDivByK(i)<<endl;
	}
	return 0;
}
/*
1 1
3 3
7 6
9 9
11 2
13 6
17 16
19 18
21 6
23 22
27 27
29 28
31 15
33 6
37 3
39 6
41 5
43 21
47 46
49 42
51 48
53 13
57 18
59 58
61 60
63 18
67 33
69 66
71 35
73 8
77 6
79 13
81 81
83 41
87 84
89 44
91 6
93 15
97 96
99 18
101 4
103 34
107 53
109 108
111 3
113 112
117 18
119 48
121 22
123 15
127 42
129 21
131 130
133 18
137 8
139 46
141 138
143 6
147 42
149 148
151 75
153 144
157 78
159 39
161 66
163 81
167 166
169 78
171 18
173 43
177 174
179 178
181 180
183 60
187 16
189 54
191 95
193 192
197 98
199 99
201 33
203 84
207 198
209 18
211 30
213 105
217 30
219 24
221 48
223 222
227 113
229 228
231 6
233 232
237 39
239 7
241 30
243 243
247 18
249 123
251 50
253 22
257 256
259 6
261 252
263 262
267 132
269 268
271 5
273 6
277 69
279 45
281 28
283 141
287 30
289 272
291 96
293 146
297 54
299 66
301 42
303 12
307 153
309 102
311 155
313 312
317 79
319 28
321 159
323 144
327 108
329 138
331 110
333 9
337 336
339 336
341 30
343 294
347 173
349 116
351 54
353 32
357 48
359 179
361 342
363 66
367 366
369 45
371 78
373 186
377 84
379 378
381 42
383 382
387 63
389 388
391 176
393 390
397 99
399 18
401 200
403 30
407 6
409 204
411 24
413 174
417 138
419 418
421 140
423 414
427 60
429 6
431 215
433 432
437 198
439 219
441 126
443 221
447 444
449 32
451 10
453 75
457 152
459 432
461 460
463 154
467 233
469 66
471 78
473 42
477 117
479 239
481 6
483 66
487 486
489 81
491 490
493 112
497 210
499 498
501 498
503 502
507 78
509 508
511 24
513 54
517 46
519 129
521 52
523 261
527 240
529 506
531 522
533 30
537 534
539 42
541 540
543 180
547 91
549 180
551 252
553 78
557 278
559 42
561 48
563 281
567 162
569 284
571 570
573 285
577 576
579 192
581 246
583 26
587 293
589 90
591 294
593 592
597 99
599 299
601 300
603 99
607 202
609 84
611 138
613 51
617 88
619 618
621 594
623 132
627 18
629 48
631 315
633 30
637 42
639 315
641 32
643 107
647 646
649 58
651 30
653 326
657 72
659 658
661 220
663 48
667 308
669 222
671 60
673 224
677 338
679 96
681 339
683 341
687 228
689 78
691 230
693 18
697 80
699 696
701 700
703 18
707 12
709 708
711 117
713 330
717 21
719 359
721 102
723 30
727 726
729 729
731 336
733 61
737 66
739 246
741 18
743 742
747 369
749 318
751 125
753 150
757 27
759 66
761 380
763 108
767 174
769 192
771 768
773 193
777 6
779 90
781 70
783 756
787 393
789 786
791 336
793 60
797 199
799 368
801 396
803 8
807 804
809 202
811 810
813 15
817 126
819 18
821 820
823 822
827 413
829 276
831 69
833 336
837 135
839 419
841 812
843 84
847 66
849 141
851 66
853 213
857 856
859 26
861 30
863 862
867 816
869 26
871 66
873 288
877 438
879 438
881 440
883 441
887 886
889 42
891 162
893 414
897 66
899 420
901 208
903 42
907 151
909 36
911 455
913 82
917 390
919 459
921 153
923 210
927 306
929 464
931 126
933 465
937 936
939 312
941 940
943 110
947 473
949 24
951 237
953 952
957 84
959 24
961 465
963 477
967 322
969 144
971 970
973 138
977 976
979 44
981 108
983 982
987 138
989 462
991 495
993 330
997 166
999 27
*/